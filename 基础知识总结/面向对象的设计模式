1.工厂模式

function createPerson(name, age){
	var obj = new Object();
	obj.name = name;
	obj.age = age;
	obj.sayName = function() {
		console.log(obj.name);
	}

	return obj;
}

//使用
var person = createPerson('wang', 25);


优点：创建多个对象
缺点：不能识别对象的类型


2.构造函数模式

function Person(name, age) {
	
	this.name = name;
	this.age = age;
	this.sayName = function() {
		console.log(this.name)
	}
}

//使用
var person = new Person('wangliang', 25);

new的具体过程：

1）创建一个新的对象

2）将this指向这个新的对象

3）执行构造函数中的代码

4）返回这个新的对象

构造函数当普通函数来使用时：this指向全局作用域

优点：可以识别对象的类型
person.constructor === Person  //true
person instanceof Person //true

每一个对象都有一个constructor属性，指向对象的构造函数
每一个函数都有一个prototype属性，指向原型对象，原型对象也有一个属性constructor指向当前函数

缺点：所有实例化的对象中的属性和方法都是独立的，不能共享

构造函数模式与工厂模式的区别

没有显示创建对象，创建新对象放在new操作里
将所有属性和方法赋值给了this
没有显示的return语句


约定：构造函数的首字母大写

3.原型模式

function Person() {}

Person.prototype.name = 'Adam';

Person.prototype.age = '25';

Person.prototype.sayName = function () {
	console.log(this.name)
}

var person1 = new Person();

var person2 = new Person();

person1.sayName === person2.sayName //true

原型链是由每个对象上的一个隐藏属性__proto__属性连接起来的。

原型链查找：逐级向上查找

原型链设置：在当前对象上设置属性和方法

产生的问题：同名屏蔽问题

解决：使用delete删除

任意对象都可以访问的方法(因为这些方法是Object.prototype上的方法)：

toString()

valueOf()

isPrototypeOf()   

hasOwnProperty()  判断参数是否是对象的自由属性

propertyIsEmurable()  属性是否可枚举


访问原型对象，ES5中

getPropertyOf()  获取参数的原型对象

in操作符

1）获取所有属性，
在ES3  for in用于枚举对象上的所有可枚举的属性，包括原型对象上的属性
在ES5  Object.keys()  参数为需要枚举的对象


2)获取当前对象自由属性
在ES3   for in  +  hasOwnProperty()
在ES5   getOwnPropertyNames()


3)获取原型对象的上属性
在ES3  for in   + hasOwnProperty()
在ES5  getPropertyOf()   + getOwnPropertyNames()


哪些属性是可枚举的？
Object对象上的属性和方法都是不可枚举的: toString()  valueOf()等
constructor属性在ES3中可枚举，在ES5中不可枚举


原型的动态性

function Person () {}

var person = new Person();

Person.prototype.name = 'wangliang';

person.name

当重写原型对象时，会出现问题

function Person() {}

var person = new Person();

//重写了原型对象
Person.prototype = {
	name: 'wangliang'
}

Person.prototype.constructor = Person;

person.name //undefined

原型模式缺点： 所有实例都共享相同的属性和方法


4.组合模式
将不共享的属性放在构造函数中，将共享的方法放在原型中。
function Person(name, age) {
	this.name = name;
	this.age = age;
}

Person.prototype.sayName = function() {
	console.log(this.name)
}

5.动态原型模式
function Person(name, age) {
	this.name = name;
	this.age = age;

	//作一个判断
	if(typeof this.sayName != 'function'){
		this.sayName = function() {
			console.log(this.name);
		}
	}
}

6.寄生构造模式
function Person(name, age) {
	var o = new Object();
	o.name = name;
	o.age = age;
	o.sayName = function() {
		console.log(this.name);
	}
	return o;
}

//使用
var person = new Person('wangliang', 26)

7.稳妥模式  
function Person (name, age) {
	var o = new Object();
	o.sayName = function() {
		console.log(name);
	}

	return o;
}