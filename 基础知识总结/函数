1.函数对象

javascript中函数就是对象

每个函数对象在创建时都会生成两个属性：prototype  __proto__(是不可见的，只有在现代浏览器下可访问)

prototype指向的是构造函数所生成实例的原型对象

__proto__指向的是该函数对象所对应的原型对象

因为函数是对象，所以它们可以像任何其他的值一样被使用。函数中可以保存在变量，对象，数组中。

函数可以被当作参数传递给其他函数：即时执行函数和回调函数

函数也可以再返回函数：闭包

函数也是对象，所以函数也可以有方法，有属性。

每个函数都有一个name属性，该属性为只读属性，不可对其进行修改，表示函数名，匿名函数返回""。

函数的与众不同之处在于它们可以被调用。

即时执行函数：就是指立即执行函数，没有时间延迟，如Array.sort(fn)方法中的排序函数

回调函数：有时间延迟，如setTimeout(fn,duration)


2.函数字面量

函数字面量又可以分为两种：

1)函数表达式(匿名函数)

2)命名函数表达式

var add = function(a, b) {
	return a + b;
};

注意：最后要跟上这个分号。

函数字面量包括4个部分：

第1部分：是保留字function

第2部分：函数名，可以省略（省略后，则为匿名函数）

第3部分：是包含在圆括号中的一组参数。多个参数用逗号隔开

第4部分：是包围在花括号中的一组语句。


3.调用

调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。

具体过程：

1)调用一个函数，会创建一个执行环境（excution context）

2)创建一个作用域(调用作用域),作用域链

3)在作用域的顶端创建一个活动对象

4)给活动对象添加arguments属性，arguments属性是一个类数组对象，有length属性，callee属性

5)将函数的形参添加到活动对象上

6)将函数中的变量，函数名添加到活动对象上

7)将this添加到活动对象

在javaScript中,this有四种调用模式：函数调用模式，对象方法调用模式，构造函数调用模式，apply/call调用模式。

当实际参数的个数与形参个数不匹配时，不会导致运行时错误。如果实际参数的数值过多了，超出的参数值会被忽略，如果

实际参数值过少，缺失的值会被替换成undefined.

对参数值不会进行类型检测：任何类型的值都可以传给任何参数。

纯函数调用模式

function Person (name) {
	this.name = name;
}

//调用
Person('wangliang'); //this指向window  window.name = 'wangliang'

对象方法调用模式

var person = {
	name: 'wangliang',
	sayName: function() {
		console.log(this.name);
	}
}

person.sayName() //this指向person

构造函数调用模式

function Person(name) {
	this.name = name;
}

//调用
var person = new Person('wangliang'); //this指向person(即new关键字创建出来的那个新对象)

apply/call模式

function Person (name) {
	console.log(name)
}

var person = {
	name: 'wangliang'
}
//调用
Person.apply(person, [person.name]);

4.参数
当函数被调用时，会得到一个免费配送的参数，那就是arguments数组。
函数可以通过此参数访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形式参数的多余参数。

var sum = function() {
	var i,sum = 0,len = arguments.length;
	for(i=0; i<len; i++){
		sum += arguments[i];
	}

	return sum;
}

arguments是一个类数组对象，其它的类数组对象有：document.frames  html集合（document.getElementsByTagName()）
arguments有length属性和callee属性

将其转化成数组的方法: Array.prototype.slice.apply(arguments);


5.返回

当一个函数被调用，如果遇到return 或者关闭函数的 } ,函数结束，将控制权交还结调用该函数的程序。

一个函数总会有一个返回值，如没有指定的返回值，则返回undefined.

如果函数调用时加上new关键字，且返回值不是一个对象时，则返回this（该新对象）


6.异常

异常是干扰程序的正常流程的不寻常的事故。当发现这样的事故时，你的程序应该抛出一个异常。

抛出一个异常对象exception，该对象包含一个异常类型的name属性和一个描述性的message属性


7.递归
用来处理树形结构
注意：要明确递归结束的条件，否则会因为堆栈溢出而失败。

8.作用域
简单概括为：作用域就是指变量的存储规则。
从内存的角度分析：在函数声明时，会创建一个<scope>属性，<scope>的属性值为所有形参列表(arguments),变量，函数名的集合，这个集合叫作用域链，作用域链中记录的是形参列表，变量，函数名

javaScript中作用域分类：全局作用域，函数作用域

javaScript中不般情况下不存在块级作用域，在ES3,ES5下，在with语句，try...catch语句中存在块级作用域，

在ES6，可以通过let来声明块级作用域

改变作用域链的方法： with 语句   try...catch语句

会延长作用域链，将其加在作用链的顶端，不建议使用，影响性能

变量的访问：变量的访问是延着作用链逐级向上查找

变量的赋值：则在当前作用域下赋值

存在的问题： 同名屏蔽问题


9.闭包

闭包就是指在一个函数中返回另一个函数

闭包阻断了垃圾回收机制，默认情况下，在函数调用完成后，垃圾回收机制就会将函数中的变量，回收掉，

当有闭包存在时，会阻断垃圾回收机制，则会把父函数中的变量保存下来。

闭包的用途：保存变量的状态

闭包的缺点：因为闭包阻断了垃圾回收机制，则会占用大量的内存，如果滥用，则容易导致内存溢出。
