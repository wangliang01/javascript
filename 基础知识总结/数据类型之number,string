1.number

js中number类型可以分为整型和浮点型

整形又可以分为：

十进制：

八进制：以0开头，在ES5中可能会报错，尽量不要使用

十六进制：以0x开头，尽量少用


2.浮点数

在js中，浮点数又叫二进制双精度浮点数，采用64位存储

在浮点数中，小数点前面的数字可以省略，省略后，默认为0

例子： .4表示0.4

在浮点数中，小数点后面的数字也可以省略，省略后，js解释器，会将其转换成整型数值(浮点数所占内存空间是整数的一倍)

在浮点数中，如果这个浮点数本身可以用一个整数来表示，js解释器，也会将其转换成整型数值

例子：2.00会被转成2

指数：在浮点数中，当有连续6个0出现，且不能用整数来表示，这时js解释器会将其转成指数

例子：3.000000004会被转成3e-8

在js中，不要对两个浮点数进行运算

例子：0.1 + 0.2 !== 0.3

原因：js解释器先将浮点数从十进制转成二进制，运算完后，再将二进制转成十进制

但js解释器再将十进制数0.1,0.2转成二进制数时，发现没有对应的数值，于是js解释器就找了一个最接近的数值




3.number类型的范围

在js中，数值是有范围的，因为受内存限制，其范围为2e-53  ~  2e53

超过这个范围的数值，js解释器用一个infinity来表示

js全局对象上有一个方法(isInfiinity)来判断一个数是否是infinity  



4.NaN

NaN是一种特殊的数值类型，它不等于任何数值，包括其本身

NaN与任何数数据类型进行运算都返回NaN

NaN与任何数据类型进行关系比较都返回false

判断一个数值是否是NaN  isNaN()



5.string

string是一种由单引号('')或者双引号("")表示的一种数据类型

转义字符

当遇到特殊字符，需要用转义字符处理  \

'A' === '\u0041' //true

字符串的特点

字符串是不可以改变的，一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，再把新的字符串赋值给变量

字符串的转换

如果是boolean,number,string  则调用toString()

String()

例子：var a = 123;

a.toString(); //'123'

String(a); //'123'

a + ''  // '123'