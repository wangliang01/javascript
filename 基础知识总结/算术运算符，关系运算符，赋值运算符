1.算术运算符

算术运算符有5种：+ - * / %

- * / % 在进行运算时有一个共同点：

先将运算符左右的操作数转化为数值，再进行运算，如果不能转化为常规的数字，则返回NaN

注意：%运算符，可能对浮点数进行求模运算

浮点数再进行运算时，存在精度问题  0.1 + 0.2 !== 0.3

二元加运算符(+)比较特殊

如果二元加运算符左右两边都是number，undefined, null, boolean时，先将其转化为数值类型，再进行运算

如果二元加运算符左右两边有一个是字符串类型(string),则另一个操作数也会被转化为字符串

如果二元加运算符左右两边有一个是对象，情况就更复杂了

如果第二个操作数是对象，一般情况下，是先调用valueOf()方法，如果能转化成原始值，就进行原始类型的加法运算

如果不能转化成原始值，则再调用toString()方法，如果能转化为原始值，则进行原始类型的加法运算，如果不能，则

返回'[object, Object]'

如果第一个操作数不是{}形式开头的，则转化方法跟上面相同，

如果是以{}开头，js解释器会将其认为是代码块的结束，这样就导致二元加运算符变成了一元加操作符

最后将第二个操作数转化成数字

例子：

1 + undefined // NaN

1 + null // 1

1 + true // 2

undefined + null // NaN

undefined + false // NaN

null + true // 1

[] + []  // ''

{} + {} // 在Firefox下得到NaN，在最新版的Chrome下得到'[object Object][object Object]' 

{} + [] // 0

[] + {} // '[object Object]'



2.关系运算符

关系运算符包括： > < >= <= != == === !==

关系运算返回的结果为布尔值

关系运算符在进行运算时，

如果左右两侧的操作数有一个为数值，则把另一个操作数也转换为数值

如果是undefined, null, boolean时，则先转成数值，再进行比较

如果是字符串，则进行编码的比较

如果是对象，一般情况下，是先调用valueOf()方法，如果能转化成原始值，就进行原始类型的加法运算

如果不能转化成原始值，则再调用toString()方法，如果能转化为原始值，则进行原始类型的加法运算，如果不能，则

返回'[object, Object]'


例子： 

7 > 6 > 5 //false

== 和 ===

==：涉及到隐式类型转换，只比较转换后的值是否相等

===：先比较数据类型是否相同，如果不同，直接返回false,如果相同，再进行值的比较

隐式类型转换：

==，if语句， while语句，for语句的第二个表达式都涉及到了隐式类型转换


3.赋值操作符(=)

赋值操作符用来对变量或者对象属性进行赋值

赋值操作符的左边的操作数被称作左值（可以变化的）

连续赋值，不推荐使用

var a = b = 1;   //此时的b就成了一个全局变量

如果用在对象上，问题就更大了

