1.原型链继承

子类的原型指向父类的实例

//父类构造函数
function Parent(name) {
	this.name = name || 'Adam';
}

//子类构造函数
function Child() {
	
}

//实现原型链继承
Child.prototype = new Parent();

//得到子类的实例
var kid = new Child();

//访问name属性
kid.name // 'Adam'

原型链继承的优点：
1）简单，一行代码搞定   Child.prototype = new Parent();


缺点：

1)不能实现多继承

2）不能接收参数




2.借用构造函数

在子类中调用父类的构造函数

//父类构造函数
function Parent (name) {
	this.name = name || 'Adam';
}

//子类构造函数
function Child() {
	//调用父类的构造函数
	Parent.apply(this, arguments);
}

//得到子类的一个实例
var kid = new Child('James');

//访问name属性
kid.name //'James'

优点：解决了原型链继承不能传参的问题
缺点：不能继承父类原型对象上的属性



3.组合式继承

结合原型链继承跟借用构造函数继承

//父类构造函数
function Parent(name) {
	this.name = name || 'Adam';
}

//为父类的原型添加方法
Parent.prototype.say = function() {
	alert(this.name)
}

//子类构造函数
function Child() {
	Parent.apply(this, arguments);
}

//子类的原型指向父类的实例
Child.prototype = new Parent();

//将子类原型的构造函数指向子类
Child.prototype.constructor = Child;

//得到子类的一个实例
var kid = new Child('Harden');

//调用say()方法
kid.say() //'Harden'



4.原型继承

一个对象继承另一个对象的属性和方法

var A = {
	name: 'Jorden',
	sayName: function() {
		alert(this.name);
	}
}

var B = {}

//让B继承A上的属性和方法  B.__proto__ = A

//创建一个临时的空函数
function F() {
	
}

//让F的原型指向A
F.prototype = A;

var B = new F();

//访问B的属性
B.name //'Jorden'


function Object(o){
	Object.prototype = o;
	var obj = new Object();
	return obj;
}

在ES5中，可以使用Object.create()

var B = Object.create(A);

5.寄生式继承


6.组合寄生式继承

//父类构造函数
function Parent(name) {
	this.name = name||'Adam';
}

//子类构造函数
function Child(){
	Parent.apply(this, arguments);
}

//Child.prototype.__proto__ = Parent.prototype

var P = Object.create(Parent.prototype);

P.constructor = Child;

Child.prototype = P;